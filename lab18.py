import json
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.enums import ParseMode
import asyncio
import os

TOKEN = "7945351462:AAE6U6hWc9zE4SzZm9iDbLMmTcstD2ms9n8"
bot = Bot(token=TOKEN)
dp = Dispatcher()

DATA_FILE = "notes.json"

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è/–∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–æ—Ç–∞—Ç–æ–∫
def load_notes():
    if not os.path.exists(DATA_FILE):
        return {}
    with open(DATA_FILE, "r", encoding="utf-8") as f:
        return json.load(f)

def save_notes(data):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

# –ö–æ–º–∞–Ω–¥–∏
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer("üëã –í—ñ—Ç–∞—é! –¶–µ –±–æ—Ç –¥–ª—è –Ω–æ—Ç–∞—Ç–æ–∫. –ù–∞–ø–∏—à—ñ—Ç—å /help –¥–ª—è —Å–ø–∏—Å–∫—É –∫–æ–º–∞–Ω–¥.")

@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    await message.answer(
        "/start - –ü–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É\n"
        "/help - –î–æ–ø–æ–º–æ–≥–∞\n"
        "/info - –ü—Ä–æ –±–æ—Ç–∞\n"
        "/exit - –ó–∞–≤–µ—Ä—à–∏—Ç–∏\n\n"
        "/addnote <—Ç–µ–∫—Å—Ç> - –î–æ–¥–∞—Ç–∏ –Ω–æ—Ç–∞—Ç–∫—É\n"
        "/shownotes - –ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ –Ω–æ—Ç–∞—Ç–∫–∏\n"
        "/clearnotes - –û—á–∏—Å—Ç–∏—Ç–∏ –≤—Å—ñ –Ω–æ—Ç–∞—Ç–∫–∏"
    )

@dp.message(Command("info"))
async def cmd_info(message: types.Message):
    await message.answer("üìù –¶–µ–π –±–æ—Ç –¥–æ–∑–≤–æ–ª—è—î –∑–±–µ—Ä—ñ–≥–∞—Ç–∏, –ø–µ—Ä–µ–≥–ª—è–¥–∞—Ç–∏ —Ç–∞ –æ—á–∏—â–∞—Ç–∏ –≤–∞—à—ñ –Ω–æ—Ç–∞—Ç–∫–∏.")

@dp.message(Command("exit"))
async def cmd_exit(message: types.Message):
    await message.answer("–î–æ –∑—É—Å—Ç—Ä—ñ—á—ñ! –©–æ–± –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å, –Ω–∞–ø–∏—à—ñ—Ç—å /start.")

@dp.message(Command("addnote"))
async def cmd_add_note(message: types.Message):
    note_text = message.text[9:].strip()
    if not note_text:
        await message.answer("‚ùó –ë—É–¥—å –ª–∞—Å–∫–∞, –¥–æ–¥–∞–π—Ç–µ —Ç–µ–∫—Å—Ç –Ω–æ—Ç–∞—Ç–∫–∏ –ø—ñ—Å–ª—è –∫–æ–º–∞–Ω–¥–∏.")
        return

    notes = load_notes()
    user_id = str(message.from_user.id)
    user_notes = notes.get(user_id, [])
    user_notes.append(note_text)
    notes[user_id] = user_notes
    save_notes(notes)

    await message.answer("‚úÖ –ù–æ—Ç–∞—Ç–∫—É –¥–æ–¥–∞–Ω–æ!")

@dp.message(Command("shownotes"))
async def cmd_show_notes(message: types.Message):
    notes = load_notes()
    user_id = str(message.from_user.id)
    user_notes = notes.get(user_id, [])

    if not user_notes:
        await message.answer("üì≠ –£ –≤–∞—Å –ø–æ–∫–∏ –Ω–µ–º–∞—î –Ω–æ—Ç–∞—Ç–æ–∫.")
    else:
        formatted = "\n".join(f"{idx+1}. {note}" for idx, note in enumerate(user_notes))
        await message.answer(f"üóí –í–∞—à—ñ –Ω–æ—Ç–∞—Ç–∫–∏:\n{formatted}")

@dp.message(Command("clearnotes"))
async def cmd_clear_notes(message: types.Message):
    notes = load_notes()
    user_id = str(message.from_user.id)
    if user_id in notes:
        notes[user_id] = []
        save_notes(notes)
        await message.answer("üßπ –£—Å—ñ –≤–∞—à—ñ –Ω–æ—Ç–∞—Ç–∫–∏ –≤–∏–¥–∞–ª–µ–Ω–æ.")
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ–º–∞—î –Ω–æ—Ç–∞—Ç–æ–∫ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
